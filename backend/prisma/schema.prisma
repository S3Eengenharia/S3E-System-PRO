// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTENTICAÇÃO E USUÁRIOS
// ============================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user") // admin, orcamentista, compras, gerente
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// ============================================
// CADASTROS BÁSICOS
// ============================================

model Cliente {
  id        String   @id @default(uuid())
  nome      String
  cpfCnpj   String   @unique
  email     String?
  telefone  String?
  endereco  String?
  cidade    String?
  estado    String?
  cep       String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orcamentos Orcamento[]
  projetos   Projeto[]
  vendas     Venda[]

  @@map("clientes")
}

model Fornecedor {
  id        String   @id @default(uuid())
  nome      String
  cnpj      String   @unique
  email     String?
  telefone  String?
  endereco  String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  materiais   Material[]
  compras     Compra[]
  contasPagar ContaPagar[]

  @@map("fornecedores")
}

// ============================================
// ESTOQUE E MATERIAIS
// ============================================

model Material {
  id            String   @id @default(uuid())
  nome          String
  sku           String   @unique
  tipo          String // Tipo do material
  categoria     String // MaterialEletrico, Insumo, Ferramenta
  descricao     String?
  estoque       Float    @default(0)
  estoqueMinimo Float    @default(5)
  unidadeMedida String   @default("un")
  localizacao   String?
  preco         Float? // Preço de referência
  fornecedorId  String?
  ativo         Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  fornecedor     Fornecedor?           @relation(fields: [fornecedorId], references: [id])
  kitItems       KitItem[]
  orcamentoItems OrcamentoItem[]
  compraItems    CompraItem[]
  movimentacoes  MovimentacaoEstoque[]

  @@map("materiais")
}

model Servico {
  id        String   @id @default(uuid())
  nome      String
  codigo    String   @unique
  descricao String?
  tipo      String // Instalacao, Manutencao, Consultoria, LaudoTecnico
  preco     Float
  unidade   String   @default("un") // un, hora, m2, etc
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("servicos")
}

model Kit {
  id        String   @id @default(uuid())
  nome      String
  descricao String?
  preco     Float
  tipo      String // medidores, comando, quadro-eletrico, subestacoes
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items          KitItem[]
  orcamentoItems OrcamentoItem[]

  @@map("kits")
}

model KitItem {
  id         String @id @default(uuid())
  kitId      String
  materialId String
  quantidade Float

  kit      Kit      @relation(fields: [kitId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@map("kit_items")
}

// ============================================
// ORÇAMENTOS
// ============================================

model Orcamento {
  id          String    @id @default(uuid())
  clienteId   String
  titulo      String
  descricao   String? // HTML do Quill editor
  validade    DateTime
  status      String    @default("Rascunho") // Rascunho, Enviado, Aprovado, Rejeitado
  bdi         Float     @default(0) // Margem de lucro
  custoTotal  Float     @default(0)
  precoVenda  Float     @default(0)
  observacoes String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aprovedAt   DateTime?

  cliente Cliente         @relation(fields: [clienteId], references: [id])
  items   OrcamentoItem[]
  projeto Projeto?
  venda   Venda? // Relação 1:1 com venda (quando orçamento é vendido)

  @@map("orcamentos")
}

model OrcamentoItem {
  id          String  @id @default(uuid())
  orcamentoId String
  tipo        String // MATERIAL, KIT, SERVICO
  materialId  String?
  kitId       String?
  servicoNome String? // Para serviços avulsos
  quantidade  Float
  custoUnit   Float
  precoUnit   Float
  subtotal    Float

  orcamento Orcamento @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  material  Material? @relation(fields: [materialId], references: [id])
  kit       Kit?      @relation(fields: [kitId], references: [id])

  @@map("orcamento_items")
}

// ============================================
// PROJETOS E KANBAN
// ============================================

enum ProjetoStatus {
  PROPOSTA
  APROVADO
  EXECUCAO
  CONCLUIDO
}

model Projeto {
  id           String        @id @default(uuid())
  orcamentoId  String        @unique
  clienteId    String
  titulo       String
  descricao    String?
  valorTotal   Float
  dataInicio   DateTime      @default(now())
  dataPrevisao DateTime?
  dataFim      DateTime?
  status       ProjetoStatus @default(PROPOSTA)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  orcamento    Orcamento      @relation(fields: [orcamentoId], references: [id])
  cliente      Cliente        @relation(fields: [clienteId], references: [id])
  tasks        Task[]
  notasFiscais NotaFiscal[]
  vendas       Venda[]
  alocacoes    AlocacaoObra[]
  etapasAdmin  EtapaAdmin[]
  tarefasCampo TarefaCampo[]

  @@map("projetos")
}

model EtapaAdmin {
  id             String    @id @default(uuid())
  projetoId      String
  tipo           String // ABERTURA_SR, EMITIR_ART, etc.
  ordem          Int // Ordem de execução (1-10)
  concluida      Boolean   @default(false)
  dataInicio     DateTime? // Quando foi iniciada
  dataPrevista   DateTime // Prazo previsto (24h por padrão)
  dataConclusao  DateTime? // Quando foi concluída
  observacoes    String?
  motivoExtensao String? // Motivo para extensão de prazo
  // Campos compatíveis com especificação solicitada
  nome           String? // alias para exibição
  dataExpiracao  DateTime? // espelha dataPrevista
  realizada      Boolean? // espelha concluida
  justificativa  String? // alias para motivo de adiamento
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  @@index([projetoId])
  @@index([tipo])
  @@index([concluida])
  @@map("etapas_admin")
}

enum TarefaCampoStatus {
  A_FAZER
  EM_ANDAMENTO
  CONCLUIDO
}

model Task {
  id          String    @id @default(uuid())
  projetoId   String
  titulo      String
  descricao   String?
  status      String    @default("ToDo") // ToDo, Doing, Done
  prioridade  String    @default("Media") // Baixa, Media, Alta
  prazo       DateTime?
  responsavel String?
  ordem       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TarefaCampo {
  id            String            @id @default(uuid())
  projetoId     String
  titulo        String
  descricao     String?
  status        TarefaCampoStatus @default(A_FAZER)
  responsavelId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  @@index([projetoId])
  @@map("tarefas_campo")
}

// ============================================
// PESSOAS / TÉCNICOS DE CAMPO
// ============================================

enum FuncaoPessoa {
  TECNICO_1
  ELETRICISTA_2
  ENGENHEIRO
  AUXILIAR
}

model Pessoa {
  id         String       @id @default(uuid())
  nome       String
  email      String?      @unique
  funcao     FuncaoPessoa
  disponivel Boolean      @default(true)
  ativo      Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("pessoas")
}

// ============================================
// COMPRAS
// ============================================

model Compra {
  id              String    @id @default(uuid())
  fornecedorId    String
  fornecedorNome  String
  fornecedorCNPJ  String
  fornecedorTel   String?
  numeroNF        String
  dataEmissaoNF   DateTime
  dataCompra      DateTime
  dataRecebimento DateTime?
  valorSubtotal   Float
  valorFrete      Float     @default(0)
  outrasDespesas  Float     @default(0)
  valorTotal      Float
  status          String    @default("Pendente") // Pendente, Recebido, Cancelado
  xmlData         String? // JSON string com dados completos do XML
  observacoes     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  fornecedor Fornecedor   @relation(fields: [fornecedorId], references: [id])
  items      CompraItem[]

  @@map("compras")
}

model CompraItem {
  id          String  @id @default(uuid())
  compraId    String
  materialId  String?
  nomeProduto String
  ncm         String?
  quantidade  Float
  valorUnit   Float
  valorTotal  Float

  compra   Compra    @relation(fields: [compraId], references: [id], onDelete: Cascade)
  material Material? @relation(fields: [materialId], references: [id])

  @@map("compra_items")
}

// ============================================
// MOVIMENTAÇÃO DE ESTOQUE
// ============================================

model MovimentacaoEstoque {
  id          String   @id @default(uuid())
  materialId  String
  tipo        String // ENTRADA, SAIDA, AJUSTE
  quantidade  Float
  motivo      String // COMPRA, VENDA, PROJETO, DEVOLUCAO, AJUSTE
  referencia  String? // ID da compra, projeto, etc
  observacoes String?
  data        DateTime @default(now())
  createdAt   DateTime @default(now())

  material Material @relation(fields: [materialId], references: [id])

  @@map("movimentacoes_estoque")
}

// ============================================
// VENDAS E FINANCEIRO
// ============================================

model Venda {
  id             String   @id @default(uuid())
  numeroVenda    String   @unique
  orcamentoId    String   @unique // Vínculo com orçamento aprovado
  dataVenda      DateTime @default(now())
  valorTotal     Float
  status         String   @default("Pendente") // Pendente, Concluida, Cancelada
  clienteId      String
  projetoId      String?
  formaPagamento String   @default("À vista") // À vista, Parcelado, Boleto, PIX
  parcelas       Int      @default(1)
  valorEntrada   Float    @default(0)
  observacoes    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orcamento     Orcamento      @relation(fields: [orcamentoId], references: [id])
  cliente       Cliente        @relation(fields: [clienteId], references: [id])
  projeto       Projeto?       @relation(fields: [projetoId], references: [id])
  contasReceber ContaReceber[]

  @@map("vendas")
}

model ContaReceber {
  id             String    @id @default(uuid())
  vendaId        String
  descricao      String
  valorParcela   Float
  dataVencimento DateTime
  dataPagamento  DateTime?
  status         String    @default("Pendente") // Pendente, Pago, Atrasado, Cancelado
  numeroParcela  Int?
  totalParcelas  Int?
  observacoes    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  venda Venda @relation(fields: [vendaId], references: [id], onDelete: Cascade)

  @@map("contas_receber")
}

model ContaPagar {
  id             String    @id @default(uuid())
  fornecedorId   String? // Opcional para permitir despesas sem fornecedor específico
  compraId       String?
  descricao      String
  valorParcela   Float // Valor da parcela/despesa
  dataVencimento DateTime
  dataPagamento  DateTime?
  status         String    @default("Pendente") // Pendente, Pago, Atrasado, Cancelado
  numeroParcela  Int?
  totalParcelas  Int?
  observacoes    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  fornecedor Fornecedor? @relation(fields: [fornecedorId], references: [id])

  @@map("contas_pagar")
}

// ============================================
// CONFIGURAÇÕES FISCAIS
// ============================================

model EmpresaFiscal {
  id                  String    @id @default(uuid())
  cnpj                String    @unique
  inscricaoEstadual   String
  razaoSocial         String
  nomeFantasia        String?
  endereco            String // Logradouro
  numero              String
  complemento         String?
  bairro              String
  cidade              String
  estado              String
  cep                 String
  telefone            String?
  email               String?
  regimeTributario    String // SimplesNacional, RegimeNormal, MEI
  certificadoPath     String? // Caminho do arquivo .pfx no servidor
  certificadoSenha    String? // Senha criptografada
  certificadoValidade DateTime?
  ativo               Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("empresas_fiscais")
}

// ============================================
// NOTA FISCAL ELETRÔNICA
// ============================================

model NotaFiscal {
  id              String   @id @default(uuid())
  projetoId       String?
  empresaFiscalId String? // CNPJ emissor
  numero          String   @unique
  serie           String
  chaveAcesso     String?  @unique
  tipo            String // PRODUTO, SERVICO
  natureza        String // Venda de produção, Remessa, etc
  cfop            String
  valorProdutos   Float
  valorServicos   Float    @default(0)
  valorTotal      Float
  dataEmissao     DateTime @default(now())
  status          String   @default("Pendente") // Pendente, Autorizada, Cancelada
  xmlNFe          String? // XML gerado/autorizado
  observacoes     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  projeto Projeto? @relation(fields: [projetoId], references: [id])

  @@map("notas_fiscais")
}

// ============================================
// GESTÃO OPERACIONAL - EQUIPES E ALOCAÇÕES
// ============================================

enum TipoEquipe {
  MONTAGEM
  CAMPO
  DISTINTA
}

model Equipe {
  id        String     @id @default(uuid())
  nome      String     @unique // Ex: Equipe A, Equipe B, Equipe C
  tipo      TipoEquipe
  membros   String[] // Array de IDs de usuários
  ativa     Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  alocacoes AlocacaoObra[]

  @@map("equipes")
}

model AlocacaoObra {
  id              String    @id @default(uuid())
  equipeId        String
  projetoId       String // Relacionado com Projeto (Obra)
  dataInicio      DateTime
  dataFimPrevisto DateTime
  dataFimReal     DateTime?
  status          String    @default("Planejada") // Planejada, EmAndamento, Concluida, Cancelada
  observacoes     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  equipe  Equipe  @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  @@map("alocacoes_obra")
}

model HistoryLog {
  id        String   @id @default(uuid())
  userId    String
  userName  String
  action    String // CREATE, UPDATE, DELETE, VIEW
  module    String // Orcamentos, Clientes, Materiais, etc
  entityId  String? // ID do registro afetado
  details   String? // JSON com detalhes da ação
  ip        String?
  timestamp DateTime @default(now())

  @@index([module, timestamp])
  @@index([userId, timestamp])
  @@map("history_logs")
}
